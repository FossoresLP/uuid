package uuid

import (
	"reflect"
	"testing"
)

/*
RFC 9562 A.6. Example of a UUIDv7 Value
-------------------------------------------
field       bits value
-------------------------------------------
unix_ts_ms  48   0x017F22E279B0
ver          4   0x7
rand_a      12   0xCC3
var          2   0b10
rand_b      62   0b01, 0x8C4DC0C0C07398F
-------------------------------------------
total       128
-------------------------------------------
final: 017F22E2-79B0-7CC3-98C4-DC0C0C07398F
*/

func TestNewV7(t *testing.T) {
	tests := []struct {
		name     string
		testTime int64
		testSeq  int64
		testRand []byte
		wantUUID UUID
	}{
		{
			"RFC9562",
			testVecTimeRFC,
			(0xCC3*999999 + 4095) / 4095,
			[]byte{0x18, 0xC4, 0xDC, 0x0C, 0x0C, 0x07, 0x39, 0x8F},
			UUID{0x01, 0x7F, 0x22, 0xE2, 0x79, 0xB0, 0x7C, 0xC3, 0x98, 0xC4, 0xDC, 0x0C, 0x0C, 0x07, 0x39, 0x8F},
		},
		{
			"DifferentTime",
			testVecTimeCustom,
			(0xCC3*999999 + 4095) / 4095,
			[]byte{0x18, 0xC4, 0xDC, 0x0C, 0x0C, 0x07, 0x39, 0x8F},
			UUID{0x01, 0x79, 0x75, 0x56, 0x0F, 0xBC, 0x77, 0x3B, 0x98, 0xC4, 0xDC, 0x0C, 0x0C, 0x07, 0x39, 0x8F},
		},
		{
			"DifferentSequence",
			testVecTimeRFC,
			(0x123*999999 + 4095) / 4095,
			[]byte{0x18, 0xC4, 0xDC, 0x0C, 0x0C, 0x07, 0x39, 0x8F},
			UUID{0x01, 0x7F, 0x22, 0xE2, 0x79, 0xB0, 0x71, 0x23, 0x98, 0xC4, 0xDC, 0x0C, 0x0C, 0x07, 0x39, 0x8F},
		},
		{
			"DifferentRandom",
			testVecTimeRFC,
			(0xCC3*999999 + 4095) / 4095,
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
			UUID{0x01, 0x7F, 0x22, 0xE2, 0x79, 0xB0, 0x7C, 0xC3, 0x81, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			testPrepare(tt.testTime+tt.testSeq, tt.testRand, 0, nil)
			gotUUID := NewV7()
			if !reflect.DeepEqual(gotUUID, tt.wantUUID) {
				t.Errorf("NewV7() = %v, want %v", gotUUID, tt.wantUUID)
			}
		})
	}
}
