package uuid

import (
	"reflect"
	"testing"
)

func TestNewV7(t *testing.T) {
	tests := []struct {
		name       string
		fakeRandom []byte
		fakeTime   int64
		wantUUID   UUID
		wantErr    bool
	}{
		{
			"Default",
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
			testVecTimeCustom,
			UUID{0x01, 0x79, 0x75, 0x56, 0x0F, 0xBB, 0x70, 0x00, 0x81, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
			false,
		},
		{
			"Sequence",
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
			testVecTimeCustom,
			UUID{0x01, 0x79, 0x75, 0x56, 0x0F, 0xBB, 0x70, 0x01, 0x81, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
			false,
		},
		{
			"NextTime",
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
			testVecTimeCustom + 1000000000,
			UUID{0x01, 0x79, 0x75, 0x56, 0x13, 0xA3, 0x70, 0x00, 0x81, 0x23, 0x45, 0x67, 0x89, 0xAB, 0xCD, 0xEF},
			false,
		},
		{
			"NoRandom",
			nil,
			testVecTimeCustom,
			UUID{0x01, 0x79, 0x75, 0x56, 0x0F, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
			true,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			testTime(tt.fakeTime)
			testRand(tt.fakeRandom...)
			gotUUID, err := NewV7()
			if (err != nil) != tt.wantErr {
				t.Errorf("NewV7() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(gotUUID, tt.wantUUID) {
				t.Errorf("NewV7() = %v, want %v", gotUUID, tt.wantUUID)
			}
		})
	}
}
