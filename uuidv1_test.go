package uuid

import (
	"reflect"
	"testing"
)

/*
RFC 9562 A.1. Example of a UUIDv1 Value
-------------------------------------------
field      bits value
-------------------------------------------
time_low   32   0xC232AB00
time_mid   16   0x9414
ver         4   0x1
time_high  12   0x1EC
var         2   0b10
clock_seq  14   0b11, 0x3C8
node       48   0x9F6BDECED846
-------------------------------------------
total      128
-------------------------------------------
final: C232AB00-9414-11EC-B3C8-9F6BDECED846
*/

func TestNewV1(t *testing.T) {
	tests := []struct {
		name     string
		testTime int64
		randUint uint32
		mac      []byte
		wantUUID UUID
		nextUUID UUID
	}{
		{
			"RFC9562",
			testVecTimeRFC,
			0x33C8,
			[]byte{0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
			UUID{0xC2, 0x32, 0xAB, 0x00, 0x94, 0x14, 0x11, 0xEC, 0xB3, 0xC8, 0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
			UUID{0xC2, 0x32, 0xAB, 0x00, 0x94, 0x14, 0x11, 0xEC, 0xB3, 0xC9, 0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
		},
		{
			"DifferentTime",
			testVecTimeCustom,
			0x33C8,
			[]byte{0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
			UUID{0x85, 0x47, 0xD2, 0x3F, 0xB6, 0x49, 0x11, 0xEB, 0xB3, 0xC8, 0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
			UUID{0x85, 0x47, 0xD2, 0x3F, 0xB6, 0x49, 0x11, 0xEB, 0xB3, 0xC9, 0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
		},
		{
			"DifferentSequence",
			testVecTimeRFC,
			0x0123,
			[]byte{0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
			UUID{0xC2, 0x32, 0xAB, 0x00, 0x94, 0x14, 0x11, 0xEC, 0x81, 0x23, 0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
			UUID{0xC2, 0x32, 0xAB, 0x00, 0x94, 0x14, 0x11, 0xEC, 0x81, 0x24, 0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
		},
		{
			"DifferentMAC",
			testVecTimeRFC,
			0x33C8,
			[]byte{0x01, 0x23, 0x45, 0x67, 0x89, 0xAB},
			UUID{0xC2, 0x32, 0xAB, 0x00, 0x94, 0x14, 0x11, 0xEC, 0xB3, 0xC8, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB},
			UUID{0xC2, 0x32, 0xAB, 0x00, 0x94, 0x14, 0x11, 0xEC, 0xB3, 0xC9, 0x01, 0x23, 0x45, 0x67, 0x89, 0xAB},
		},
		{
			"SequenceRollover",
			testVecTimeRFC,
			0x3FFF,
			[]byte{0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
			UUID{0xC2, 0x32, 0xAB, 0x00, 0x94, 0x14, 0x11, 0xEC, 0xBF, 0xFF, 0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
			UUID{0xC2, 0x32, 0xAB, 0x00, 0x94, 0x14, 0x11, 0xEC, 0x80, 0x00, 0x9F, 0x6B, 0xDE, 0xCE, 0xD8, 0x46},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			testPrepare(tt.testTime, nil, tt.randUint, tt.mac)
			v1LastTimestamp.Store(0)
			v1LastSequence.Store(0)
			gotUUID := NewV1()
			if !reflect.DeepEqual(gotUUID, tt.wantUUID) {
				t.Errorf("NewV1() = %v, want %v for first ID", gotUUID, tt.wantUUID)
			}
			seqUUID := NewV1()
			if !reflect.DeepEqual(seqUUID, tt.nextUUID) {
				t.Errorf("NewV1() = %v, want %v for sequential ID", seqUUID, tt.nextUUID)
			}
		})
	}
}
