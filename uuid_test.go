package uuid

import (
	"bytes"
	"crypto/rand"
	"testing"
	"time"
)

func testTime(add ...time.Duration) func() time.Time {
	return func() time.Time {
		if len(add) > 0 {
			return time.Unix(1621171244, 987654321).Add(add[0])
		}
		return time.Unix(1621171244, 987654321)
	}
}

var random = rand.Reader // store rand.Reader since it is replaced by static data by some tests

func testRand(b ...byte) {
	rand.Reader = bytes.NewBuffer(b)
}

func trueRand() {
	rand.Reader = random
}

func TestMustString(t *testing.T) {
	trueRand()
	id := MustString(NewV4())
	if len(id) != 36 {
		t.Errorf("Generated UUID length is invalid. Should be 36 but is: %d", len(id))
	}
	if id[8] != '-' || id[13] != '-' || id[18] != '-' || id[23] != '-' {
		t.Errorf("Dash placement invalid. Should be 8, 13, 18, 23 but is %s", id)
	}
}

func TestUUID_IsNil(t *testing.T) {
	tests := []struct {
		name string
		UUID *UUID
		want bool
	}{
		{"NotNil", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x46, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, false},
		{"Nil", &UUID{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}, true},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.UUID.IsNil(); got != tt.want {
				t.Errorf("UUID.IsNil() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestUUID_IsMax(t *testing.T) {
	tests := []struct {
		name string
		UUID *UUID
		want bool
	}{
		{"NotMax", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x46, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, false},
		{"Max", &UUID{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, true},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.UUID.IsMax(); got != tt.want {
				t.Errorf("UUID.IsMax() = %v, want %v", got, tt.want)
			}
		})
	}
}

func TestUUID_Version(t *testing.T) {
	tests := []struct {
		name string
		UUID *UUID
		want int
	}{
		{"V0", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x06, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 0},
		{"V1", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x16, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 1},
		{"V2", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x26, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 2},
		{"V3", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x36, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 3},
		{"V4", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x46, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 4},
		{"V5", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x56, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 5},
		{"V6", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x66, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 6},
		{"V7", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x76, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 7},
		{"V8", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x86, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 8},
		{"V9", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0x96, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 9},
		{"V10", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0xA6, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 10},
		{"V11", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0xB6, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 11},
		{"V12", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0xC6, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 12},
		{"V13", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0xD6, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 13},
		{"V14", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0xE6, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 14},
		{"V15", &UUID{0x68, 0x6e, 0x77, 0x78, 0xf9, 0xf0, 0xF6, 0x22, 0xa1, 0x3e, 0xc2, 0x44, 0x1c, 0xe4, 0xae, 0x41}, 15},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := tt.UUID.Version(); got != tt.want {
				t.Errorf("UUID.Version() = %v, want %v", got, tt.want)
			}
		})
	}
}
